--------Deployment Info--------


----Google Cloud Console Settings----
-Create new project on Google Cloud Console

-Pin Firestore (DB), Billing, Cloud Functions, Pub/Sub, Cloud Scheduler, APIs and Services in left panel of console

-Add Collaborators: Click 'Add People to this project' in 'Project info' card on console -> Add members by GMail address and give roles.

-Enable Billing: Many services like Firestore DB, Cloud Functions, need Billing account in Google Cloud project to start working. Go to Billing -> link existing billing account OR Createn new Billing account/profile -> link to project. Details like debit/credit card, etc. will be taken during Billing account creation.

-Enable Billing alerts: Go to Billing -> select our account if multiple accounts -> Budgets and Alerts -> select project, all services, total money limit -> then select different alert thresholds like 50%, 75% and related alert action -> finish.
	-Sources:
		-SO: How do I set a cost limit in Google Dev Console (see answer by ptmr.io and Isaiah Norton)
		https://stackoverflow.com/questions/27616776/how-do-i-set-a-cost-limit-in-google-developers-console
		-Google Cloud Docs: Set Budget and Budget Alerts
		https://cloud.google.com/billing/docs/how-to/budgets?hl=en
		
-Enable Firestore DB: Go to Firestore -> select Firestore in Native mode (vs. Datastore mode) -> select location, etc.
	-Sources:
		-Cloud Firestore in Native mode vs. Datastore mode:
		https://cloud.google.com/datastore/docs/firestore-or-datastore
			-Native mode keeps data in simple document-collection mode, almost like JSON of realtime DB. Easier to work with but has max 10000 writes per second across DB. Majorly for web/mobile clients. Supports offline cache and event triggers on DB changes. Iterations is simply with list iteration and to_dict etc.
			-Datastore mode keeps data in entities with properties, similar to RDBMS style. Bit complex to code but has support for millions of writes per seconds. Majorly for server client apps. Does not support event triggers or offline cache. Iteration is cursor based.
			
-APIs: Enable following Google Cloud APIs by going to Cloud Console->APIs and Services-> Enable APIs and Services (Note: Some APIs may already be automatically enabled):
	-Cloud Functions API
	-Cloud Firestore API
	-Cloud Datastore API
	-Cloud Scheduler API
	-Pub/Sub API
	-Cloud Build API (used to run 'gcloud functions deploy' command)
	
-Pub/Sub topic for scheduler is created automatically by Cloud Deploy command. No need to follow Cloud docs on enabling Pub/Sub.

-Scheduling job: Go to Cloud Scheduler in Cloud Console -> Schedule a Job -> give details, cron format '*/15 * * * *' eg. for every 15mins, refer https://crontab.guru/ to create format string, select time zone IST -> next select target type Pub/Sub -> select topic '<topic_name>' -> leave retry fields to default values.
	-Sources:
		-Google Cloud Docs: Cloud Scheduler Quiskstart:
		https://cloud.google.com/scheduler/docs/quickstart
		-How to periodically run a Google Cloud Function using Google Cloud Scheduler:
		https://edigleyssonsilva.medium.com/how-to-periodically-run-a-cloud-function-using-google-cloud-scheduler-a3e44b5d867c
		
-Web Portal Static Hosting:
	-Go to domain name provider, add CNAME record to point 'www' to 'c.storage.googleapis.com'.
	-Creating Google Cloud Storage Bucket: Go Google Cloud Console -> Cloud Storage -> Create Bucket -> give name as 'www.domain.com', eg: www.covisearch.in -> select region/location -> Standard storage for frequently accessed data -> Uniform access -> Google generate encryption key -> don't click Create, read below.
	-Domain Verification by Google Cloud: Before clicking 'Create' -> go to Name section -> click 'Naming guidelines' -> search for Domain verification docs, read it -> go to Google Search Console -> enter domain name -> click Verify -> follow verification steps. May involve copying the Google generated verification ID and creating TXT record in our domain's DNS server with the verification ID, then clicking Verify.
	-Bucket Creation Last step: After DNS verification is done, click 'Create' in Google Cloud Storage Bucket.
	-NOTE: This creates an HTTP site. Additional load-balancer steps needed for HTTPS.
	-Making website public: Go to Permissions tab in bucket -> Add Member -> Enter member name as 'allUsers' -> select role 'Cloud Storage->Storage Object Viewer' -> click 'Allow public access'.
	-Upload website pages to the bucket
	-Assign special web pages: Go to Cloud Storage -> click vertical '...' more options -> select 'Edit Website configuration' -> give main page (eg: index.html) as main page, give error page.
	-Sources:
		-Google Cloud Docs: Hosting a static website using HTTP:
		https://cloud.google.com/storage/docs/hosting-static-website-http
		-Google Cloud Docs: Domain name bucket verification:
		https://cloud.google.com/storage/docs/domain-name-verification


----Deplyment Steps----
-Google Cloud SDK Setup: 
	-Download Google Cloud SDK from here (click 'Download the Cloud SDK installer'): https://cloud.google.com/sdk/docs/install
	-Install the Cloud SDK: Start the installer -> give installation location -> select bundled Python in install wizard, installation failed when bundled Python was not selected -> Finish the installation. After installation, it should automatically launch CMD with 'gcloud init' command which sets up Google Cloud project on local Dev machine. This step will ask your Google account login too by redirecting to browser and Google Cloud SDK will be set up with your Google account.
	-Troubleshooting Installation: If 'gcloud init' fails or 'gcloud' command does not work, confirm that '.PY' extension is added to 'PATHEXE' environment variable, and Cloud SDK installation 'bin' folder is present in 'PATH' environment variable. If it still does not work, re-install. Re-installating solved my problem.
	-MAYBE: I additionally installed 'App Engine SDK' component using 'gcloud components install' due to a misunderstanding. Mostly this is not actually required for Cloud Functions. If your deployment fails, then try this step.
	-Sources:
		-Google Cloud Docs: Installing Google Cloud SDK:
		https://cloud.google.com/sdk/docs/install
		
-TODO: Move this to different file
-App Authentication: App Default Creds (ADC) are needed to run program with Firestore DB from local machine. Use 'gcloud auth application-default login' command to authenticate app. You will be redirected to browser to give permissions on your profile to app-auth. 
	-Sources:
		-Google Cloud Client Libraries Docs - Authentication:
		https://googleapis.dev/python/google-api-core/latest/auth.html
		-Google Cloud Docs: Authenticating as a Service account:
		https://cloud.google.com/docs/authentication/production
		
-Cloud Functions Deployment:
	-Specify package dependencies: 
		-We need to create 'requirements.txt' file to specify third-party packages used by project
		-Create requirements.txt in Python project root folder. Use command 'pip freeze > requirements.txt' in terminal to do the same.
		-Sources:
			-Google Cloud Docs: Cloud Functions: Specifying dependencies in Python:
			https://cloud.google.com/functions/docs/writing/specifying-dependencies-python
	-Create custom '.gcloudignore' file (similar to '.gitignore') if needed to ignore files from getting deployed to Google Cloud. 'gcloud functions deploy' command creates this file by default if needed.
		-Sources:
			-Google Cloud Docs: gcloud topic gcloudignore:
			https://cloud.google.com/sdk/gcloud/reference/topic/gcloudignore
			-SO: How to include files in .gcloudignore that are ignored in .gitignore:
			https://stackoverflow.com/questions/56751106/how-to-include-files-in-gcloudignore-that-are-ignored-in-gitignore
			-SO: How to ignore files when running gcloud app deploy:
			https://stackoverflow.com/questions/46434270/how-to-ignore-files-when-running-gcloud-app-deploy/46434356
	-Deploy: Open 'run as admin' cmd from root folder of Python project and run following command:
		-gcloud functions deploy <FUNCTION_NAME> --runtime python37 --trigger-topic <Pub/Sub_Topic_Name> --max-instances <NUM_OF_INSTANCES> --memory <MEM_IN_MBs> --region <REGION_ID>
		-Eg: gcloud functions deploy resync_aggregated_data --runtime python37 --trigger-topic resync-schedule-topic --max-instances 1 --memory 128MB --region asia-south1
	-Running same command multiple times for same fn name with region ID updates given cloud function with new version
	-Deployment/Update takes few (1-2) mins
	-Change of Region of Cloud Function: If you change region id of cloud function, it is deployed as new function. You have to delete previous fn of same name but having diff region after/before deploying fn to new region.
	-Sources:
		-Google Cloud Docs: Cloud Functions - Deploying from your local machine
		https://cloud.google.com/functions/docs/deploying/filesystem
		-Google Cloud Docs: 'gcloud functions deploy' command:
		https://cloud.google.com/sdk/gcloud/reference/functions/deploy
		
	
----Deployment settings for Covisearch components----
-Data Syncer:
	-Cloud Function:
		-Deployment command and settings:
			gcloud functions deploy resync_aggregated_data --runtime python37 --trigger-topic resync-schedule-topic --max-instances 1 --memory 256MB --region asia-south1
	-Pub/Sub settings:
		-Topic name: resync-schedule-topic
	-Cloud Scheduler settings:
		-Interval: 15mins (cron schedule expressions: */15 * * * *)
		-Pub/Sub topic: resync-schedule-topic
		
-Aggregator:
	-Cloud Function:
		-Deployment command and settings:
			# Need 1024MB for Aggregator as it runs faster and we need to be responsive 
			# for returning results to user for a new filter.
			gcloud functions deploy aggregate_covid_resources --runtime python37 --trigger-topic aggregate-topic --memory 1024MB --region asia-south1
	-Pub/Sub settings:
		-Topic name: aggregate-topic
		
-Portal:
	-Cloud Hosting Static Page:
		-Cloud Storage
	
	
----Additional Sources----
-SO: Difference between Firebase Realtime DB and Cloud Firestore:
	-https://stackoverflow.com/questions/46549766/whats-the-difference-between-cloud-firestore-and-the-firebase-realtime-database
	
-Cloud Pub/Sub vs Cloud Tasks:
	-https://cloud.google.com/pubsub/docs/choosing-pubsub-or-cloud-tasks#:~:text=The%20core%20difference%20between%20Pub,and%20subscribers%20to%20those%20events.&text=By%20contrast%2C%20Cloud%20Tasks%20is,retains%20full%20control%20of%20execution.
	
-Async patterns for Cloud Functions (mentions high level pattern given in Google Cloud to query state of async jobs using Firestore, has APIs to make this easy):
	-https://cloud.google.com/community/tutorials/cloud-functions-async